00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/24/2020 9:54:46 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =00004000                  7  addr1     EQU     $4000        
00000000                             8  
00000000  =00004001                  9  addr2     EQU     $4001 
00000000                            10  
00000000  =0000A7FF                 11  data2     EQU     $A7FF 
00000000                            12  
00000000  =00005555                 13  data3     EQU     $5555 
00000000                            14  
00000000  =00000000                 15  data4     EQU     $0000 
00000000                            16  
00000000  =00001246                 17  data5     EQU     4678 
00000000                            18  
00000000  =0000004F                 19  data6     EQU     %01001111 
00000000                            20  
00000000  =00000017                 21  data7     EQU     %00010111 
00000000                            22  
00000000                            23  
00000000                            24  
00000000                            25                  ; first instruction of program
00000000                            26  
00000000                            27  ********************************************************************************************************
00000000                            28  
00000000                            29  *
00000000                            30  
00000000                            31  * Beginning of code segment. This is the actual assembly language instructions.
00000000                            32  
00000000                            33  *
00000000                            34  
00000000                            35  ********************************************************************************************************
00000000                            36  
00000000                            37      
00000400                            38      ORG    $400         * This pseudo op code tells the assembler  here
00000400                            39                          * the program will run in memory 
00000400                            40  
00000400                            41  
00000400  303C A7FF                 42  start  MOVE.W    #data2,D0     * Load D0 
00000404                            43  
00000404  123C 004F                 44           MOVE.B    #data6,D1     * Load D1 
00000408                            45  
00000408  143C 0017                 46           MOVE.B    #data7,D2     * load D2 
0000040C                            47  
0000040C  363C 5555                 48           MOVE.W    #data3,D3     * load D3 
00000410                            49  
00000410  307C 4000                 50           MOVEA.W   #addr1,A0     * load address register 
00000414                            51  
00000414  10C1                      52           MOVE.B    D1,(A0)+      * transfer byte to memory 
00000416                            53  
00000416  10C2                      54           MOVE.B    D2,(A0)+      * transfer second byte
00000418                            55  
00000418  327C 4000                 56           MOVEA.W   #addr1,A1     * load address 
0000041C                            57  
0000041C  C751                      58           AND.W     D3,(A1)       * Logical AND
0000041E                            59           
0000041E                            60           * The next instruction shows how a label is used
0000041E                            61           
0000041E  4EF8 0400                 62           JMP   start    * This instruction keeps the program
00000422                            63                          * looping forever
00000422                            64           END   $400     * This pseudo op-code tells the assembler 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               4000
ADDR2               4001
DATA2               A7FF
DATA3               5555
DATA4               0
DATA5               1246
DATA6               4F
DATA7               17
START               400
